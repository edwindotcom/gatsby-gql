{"version":3,"sources":["webpack:///./src/components/AuthorList.js","webpack:///./src/components/AddAuthor.js","webpack:///./src/pages/index.js","webpack:///./node_modules/@apollo/react-hooks/lib/react-hooks.esm.js"],"names":["GET_AUTHORS","gql","AuthorList","useQuery","loading","error","data","message","author","map","index","key","name","ADD_AUTHOR","AddAuthor","useState","setAuthor","useMutation","update","cache","existingAuthors","readQuery","query","newAuthor","insert_author","returning","writeQuery","onSubmit","event","preventDefault","variables","htmlFor","value","onChange","target","type","Index","OperationData","options","context","this","isMounted","previousOptions","prototype","getOptions","setOptions","newOptions","storePrevious","unmount","refreshClient","client","isNew","cleanup","verifyDocumentType","document","operation","QueryData","_super","_a","forceUpdate","_this","call","previousData","currentObservable","runLazy","runLazyQuery","lazyOptions","getExecuteResult","result","getQueryResult","startQuerySubscription","obsRefetch","refetch","obsFetchMore","fetchMoreOptions","fetchMore","obsUpdateQuery","mapFn","updateQuery","obsStartPolling","pollInterval","startPolling","obsStopPolling","stopPolling","obsSubscribeToMore","subscribeToMore","execute","skip","removeQuerySubscription","updateObservableQuery","getExecuteSsrResult","executeLazy","networkStatus","ready","called","undefined","fetchData","ssr","obs","getCurrentResult","afterExecute","_b","lazy","handleErrorOrCompleted","setTimeout","resetQueryStoreErrors","bind","treeRenderingInitiated","renderPromises","ssrDisabled","fetchDisabled","disableNetworkFetches","ssrLoading","addQueryPromise","prepareObservableQueryOptions","Query","displayName","fetchPolicy","metadata","reactComponent","initializeObservableQuery","getSSRObservable","observableQueryOptions","children","watchQuery","registerSSRObservable","newObservableQueryOptions","subscription","obsQuery","subscribe","next","previousResult","_error","resubscribeToQuery","hasOwnProperty","lastError","getLastError","lastResult","getLastResult","resetLastResults","Object","assign","observableQueryFields","currentResult","partial","errors","length","graphQLErrors","partialRefetch","onCompleted","onError","unsubscribe","useBaseQuery","x","tick","updatedOptions","queryDataRef","current","queryData","memoFn","ref","memo","queryResult","MutationData","setResult","runMutation","mutationFunctionOptions","onMutationStart","mutationId","generateNewMutationId","mutate","then","response","onMutationCompleted","onMutationError","mutation","Mutation","mostRecentMutationId","optimisticResponse","mutationContext","_c","awaitRefetchQueries","mutateOptions","mutateVariables","refetchQueries","ignoreResults","updateResult","isMostRecentMutation","mutationDataRef","mutationData","SubscriptionData","initialize","getLoadingResult","shouldResubscribe","keys","startSubscription","endSubscription","updateCurrentData","updateError","complete","completeSubscription","onSubscriptionData","subscriptionData","onSubscriptionComplete","RenderPromises","queryPromises","Map","queryInfoTrie","observable","props","lookupQueryInfo","queryInstance","finish","seen","set","Promise","resolve","hasPromises","size","consumeAndAwaitPromises","promises","forEach","promise","push","clear","all","varMap","get","has","variablesString","JSON","stringify","info"],"mappings":"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","file":"component---src-pages-index-js-266450d02feef6a1ae25.js","sourcesContent":["import React from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\n\nconst GET_AUTHORS = gql`\n  query {\n    author {\n      id\n      name\n    }\n  }\n`;\n\nconst AuthorList = () => {\n  const { loading, error, data } = useQuery(GET_AUTHORS);\n\n  if (loading) return \"loading...\";\n  if (error) return `error: ${error.message}`;\n\n  return (\n    <div>\n      {data.author.map((author, index) => (\n        <div key={index}>\n          <h2>{author.name}</h2>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default AuthorList;\nexport { GET_AUTHORS };\n","import React, { useState } from \"react\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport { GET_AUTHORS } from \"./AuthorList\";\n\nconst ADD_AUTHOR = gql`\n  mutation insert_author($name: String!) {\n    insert_author(objects: { name: $name }) {\n      returning {\n        id\n        name\n      }\n    }\n  }\n`;\n\nconst AddAuthor = () => {\n  const [author, setAuthor] = useState(\"\");\n  const [insert_author, { loading, error }] = useMutation(ADD_AUTHOR, {\n    update: (cache, { data }) => {\n      setAuthor(\"\");\n      const existingAuthors = cache.readQuery({\n        query: GET_AUTHORS\n      });\n\n      // Add the new author to the cache\n      const newAuthor = data.insert_author.returning[0];\n      cache.writeQuery({\n        query: GET_AUTHORS,\n        data: {author: [newAuthor, ...existingAuthors.author]}\n      });\n    }\n  });\n\n  if (loading) return \"loading...\";\n  if (error) return `error: ${error.message}`;\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    insert_author({\n      variables: {\n        name: author\n      }\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor=\"author\">\n        Add Author:\n        <input\n          name=\"author\"\n          value={author}\n          onChange={event => setAuthor(event.target.value)}\n        />\n      </label>\n      <button type=\"submit\">ADD</button>\n    </form>\n  );\n};\n\nexport default AddAuthor;\n","import React from \"react\";\n\nimport AddAuthor from \"../components/AddAuthor\";\nimport AuthorList from \"../components/AuthorList\";\n\nconst Index = () => (\n  <div>\n    <h1>My Authors</h1>\n    <AddAuthor />\n    <AuthorList />\n  </div>\n);\n\nexport default Index;","import \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.map\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.object.assign\";\nimport \"core-js/modules/es6.function.bind\";\nimport { parser, operationName, DocumentType, getApolloContext } from '@apollo/react-common';\nexport { ApolloConsumer, ApolloProvider, getApolloContext, resetApolloContext } from '@apollo/react-common';\nimport { __extends, __assign } from 'tslib';\nimport React, { useRef, useContext, useReducer, useEffect, useState } from 'react';\nimport { NetworkStatus, ApolloError } from 'apollo-client';\nimport { equal } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\n\nvar OperationData = function () {\n  function OperationData(options, context) {\n    this.isMounted = false;\n    this.previousOptions = {};\n    this.context = {};\n    this.options = {};\n    this.options = options || {};\n    this.context = context || {};\n  }\n\n  OperationData.prototype.getOptions = function () {\n    return this.options;\n  };\n\n  OperationData.prototype.setOptions = function (newOptions, storePrevious) {\n    if (storePrevious === void 0) {\n      storePrevious = false;\n    }\n\n    if (storePrevious && !equal(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n\n    this.options = newOptions;\n  };\n\n  OperationData.prototype.unmount = function () {\n    this.isMounted = false;\n  };\n\n  OperationData.prototype.refreshClient = function () {\n    var client = this.options && this.options.client || this.context && this.context.client;\n    process.env.NODE_ENV === \"production\" ? invariant(!!client, 2) : invariant(!!client, 'Could not find \"client\" in the context or passed in as an option. ' + 'Wrap the root component in an <ApolloProvider>, or pass an ' + 'ApolloClient instance in via options.');\n    var isNew = false;\n\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n\n    return {\n      client: this.client,\n      isNew: isNew\n    };\n  };\n\n  OperationData.prototype.verifyDocumentType = function (document, type) {\n    var operation = parser(document);\n    var requiredOperationName = operationName(type);\n    var usedOperationName = operationName(operation.type);\n    process.env.NODE_ENV === \"production\" ? invariant(operation.type === type, 3) : invariant(operation.type === type, \"Running a \" + requiredOperationName + \" requires a graphql \" + (requiredOperationName + \", but a \" + usedOperationName + \" was used instead.\"));\n  };\n\n  return OperationData;\n}();\n\nvar QueryData = function (_super) {\n  __extends(QueryData, _super);\n\n  function QueryData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        forceUpdate = _a.forceUpdate;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.previousData = {};\n    _this.currentObservable = {};\n    _this.runLazy = false;\n\n    _this.runLazyQuery = function (options) {\n      _this.cleanup();\n\n      _this.runLazy = true;\n      _this.lazyOptions = options;\n\n      _this.forceUpdate();\n    };\n\n    _this.getExecuteResult = function () {\n      var result = _this.getQueryResult();\n\n      _this.startQuerySubscription();\n\n      return result;\n    };\n\n    _this.obsRefetch = function (variables) {\n      return _this.currentObservable.query.refetch(variables);\n    };\n\n    _this.obsFetchMore = function (fetchMoreOptions) {\n      return _this.currentObservable.query.fetchMore(fetchMoreOptions);\n    };\n\n    _this.obsUpdateQuery = function (mapFn) {\n      return _this.currentObservable.query.updateQuery(mapFn);\n    };\n\n    _this.obsStartPolling = function (pollInterval) {\n      _this.currentObservable && _this.currentObservable.query && _this.currentObservable.query.startPolling(pollInterval);\n    };\n\n    _this.obsStopPolling = function () {\n      _this.currentObservable && _this.currentObservable.query && _this.currentObservable.query.stopPolling();\n    };\n\n    _this.obsSubscribeToMore = function (options) {\n      return _this.currentObservable.query.subscribeToMore(options);\n    };\n\n    _this.forceUpdate = forceUpdate;\n    return _this;\n  }\n\n  QueryData.prototype.execute = function () {\n    this.refreshClient();\n\n    var _a = this.getOptions(),\n        skip = _a.skip,\n        query = _a.query;\n\n    if (skip || query !== this.previousData.query) {\n      this.removeQuerySubscription();\n      this.previousData.query = query;\n    }\n\n    this.updateObservableQuery();\n    if (this.isMounted) this.startQuerySubscription();\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  };\n\n  QueryData.prototype.executeLazy = function () {\n    return !this.runLazy ? [this.runLazyQuery, {\n      loading: false,\n      networkStatus: NetworkStatus.ready,\n      called: false,\n      data: undefined\n    }] : [this.runLazyQuery, this.execute()];\n  };\n\n  QueryData.prototype.fetchData = function () {\n    var options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n    var obs = this.currentObservable.query;\n    var currentResult = obs.getCurrentResult();\n    return currentResult.loading ? obs.result() : false;\n  };\n\n  QueryData.prototype.afterExecute = function (_a) {\n    var _this = this;\n\n    var _b = (_a === void 0 ? {} : _a).lazy,\n        lazy = _b === void 0 ? false : _b;\n    this.isMounted = true;\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n      setTimeout(function () {\n        _this.currentObservable.query && _this.currentObservable.query.resetQueryStoreErrors();\n      });\n    }\n\n    this.previousOptions = this.getOptions();\n    return this.unmount.bind(this);\n  };\n\n  QueryData.prototype.cleanup = function () {\n    this.removeQuerySubscription();\n    delete this.currentObservable.query;\n    delete this.previousData.result;\n  };\n\n  QueryData.prototype.getOptions = function () {\n    var options = _super.prototype.getOptions.call(this);\n\n    if (this.lazyOptions) {\n      options.variables = __assign(__assign({}, options.variables), this.lazyOptions.variables);\n      options.context = __assign(__assign({}, options.context), this.lazyOptions.context);\n    }\n\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  };\n\n  QueryData.prototype.getExecuteSsrResult = function () {\n    var treeRenderingInitiated = this.context && this.context.renderPromises;\n    var ssrDisabled = this.getOptions().ssr === false;\n    var fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n    var ssrLoading = {\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined\n    };\n\n    if (ssrDisabled && (treeRenderingInitiated || fetchDisabled)) {\n      return ssrLoading;\n    }\n\n    var result;\n\n    if (treeRenderingInitiated) {\n      result = this.context.renderPromises.addQueryPromise(this, this.getExecuteResult) || ssrLoading;\n    }\n\n    return result;\n  };\n\n  QueryData.prototype.prepareObservableQueryOptions = function () {\n    var options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    var displayName = options.displayName || 'Query';\n\n    if (this.context && this.context.renderPromises && (options.fetchPolicy === 'network-only' || options.fetchPolicy === 'cache-and-network')) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return __assign(__assign({}, options), {\n      displayName: displayName,\n      context: options.context,\n      metadata: {\n        reactComponent: {\n          displayName: displayName\n        }\n      }\n    });\n  };\n\n  QueryData.prototype.initializeObservableQuery = function () {\n    if (this.context && this.context.renderPromises) {\n      this.currentObservable.query = this.context.renderPromises.getSSRObservable(this.getOptions());\n    }\n\n    if (!this.currentObservable.query) {\n      var observableQueryOptions = this.prepareObservableQueryOptions();\n      this.previousData.observableQueryOptions = __assign(__assign({}, observableQueryOptions), {\n        children: null\n      });\n      this.currentObservable.query = this.refreshClient().client.watchQuery(__assign({}, observableQueryOptions));\n\n      if (this.context && this.context.renderPromises) {\n        this.context.renderPromises.registerSSRObservable(this.currentObservable.query, observableQueryOptions);\n      }\n    }\n  };\n\n  QueryData.prototype.updateObservableQuery = function () {\n    if (!this.currentObservable.query) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    var newObservableQueryOptions = __assign(__assign({}, this.prepareObservableQueryOptions()), {\n      children: null\n    });\n\n    if (!equal(newObservableQueryOptions, this.previousData.observableQueryOptions)) {\n      this.previousData.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable.query.setOptions(newObservableQueryOptions)[\"catch\"](function () {});\n    }\n  };\n\n  QueryData.prototype.startQuerySubscription = function () {\n    var _this = this;\n\n    if (this.currentObservable.subscription || this.getOptions().skip) return;\n    var obsQuery = this.currentObservable.query;\n    this.currentObservable.subscription = obsQuery.subscribe({\n      next: function next(_a) {\n        var loading = _a.loading,\n            networkStatus = _a.networkStatus,\n            data = _a.data;\n        var previousResult = _this.previousData.result;\n\n        if (previousResult && previousResult.loading === loading && previousResult.networkStatus === networkStatus && equal(previousResult.data, data)) {\n          return;\n        }\n\n        _this.forceUpdate();\n      },\n      error: function error(_error) {\n        _this.resubscribeToQuery();\n\n        if (!_error.hasOwnProperty('graphQLErrors')) throw _error;\n        var previousResult = _this.previousData.result;\n\n        if (previousResult && previousResult.loading || !equal(_error, _this.previousData.error)) {\n          _this.previousData.error = _error;\n\n          _this.forceUpdate();\n        }\n      }\n    });\n  };\n\n  QueryData.prototype.resubscribeToQuery = function () {\n    this.removeQuerySubscription();\n    var lastError = this.currentObservable.query.getLastError();\n    var lastResult = this.currentObservable.query.getLastResult();\n    this.currentObservable.query.resetLastResults();\n    this.startQuerySubscription();\n    Object.assign(this.currentObservable.query, {\n      lastError: lastError,\n      lastResult: lastResult\n    });\n  };\n\n  QueryData.prototype.getQueryResult = function () {\n    var result = this.observableQueryFields();\n    var options = this.getOptions();\n\n    if (options.skip) {\n      result = __assign(__assign({}, result), {\n        data: undefined,\n        error: undefined,\n        loading: false,\n        called: true\n      });\n    } else {\n      var currentResult = this.currentObservable.query.getCurrentResult();\n      var loading = currentResult.loading,\n          partial = currentResult.partial,\n          networkStatus = currentResult.networkStatus,\n          errors = currentResult.errors;\n      var error = currentResult.error,\n          data = currentResult.data;\n\n      if (errors && errors.length > 0) {\n        error = new ApolloError({\n          graphQLErrors: errors\n        });\n      }\n\n      result = __assign(__assign({}, result), {\n        loading: loading,\n        networkStatus: networkStatus,\n        error: error,\n        called: true\n      });\n\n      if (loading) {\n        var previousData = this.previousData.result && this.previousData.result.data;\n        result.data = previousData && data ? __assign(__assign({}, previousData), data) : previousData || data;\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.query.getLastResult() || {}).data\n        });\n      } else {\n        var fetchPolicy = this.currentObservable.query.options.fetchPolicy;\n        var partialRefetch = options.partialRefetch;\n\n        if (partialRefetch && !data && partial && fetchPolicy !== 'cache-only') {\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading\n          });\n          result.refetch();\n          return result;\n        }\n\n        result.data = data;\n      }\n    }\n\n    result.client = this.client;\n    this.previousData.loading = this.previousData.result && this.previousData.result.loading || false;\n    this.previousData.result = result;\n    return result;\n  };\n\n  QueryData.prototype.handleErrorOrCompleted = function () {\n    var obsQuery = this.currentObservable.query;\n    if (!obsQuery) return;\n\n    var _a = obsQuery.getCurrentResult(),\n        data = _a.data,\n        loading = _a.loading,\n        error = _a.error;\n\n    if (!loading) {\n      var _b = this.getOptions(),\n          query = _b.query,\n          variables = _b.variables,\n          onCompleted = _b.onCompleted,\n          onError = _b.onError;\n\n      if (this.previousOptions && !this.previousData.loading && equal(this.previousOptions.query, query) && equal(this.previousOptions.variables, variables)) {\n        return;\n      }\n\n      if (onCompleted && !error) {\n        onCompleted(data);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  };\n\n  QueryData.prototype.removeQuerySubscription = function () {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  };\n\n  QueryData.prototype.observableQueryFields = function () {\n    var observable = this.currentObservable.query;\n    return {\n      variables: observable.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore\n    };\n  };\n\n  return QueryData;\n}(OperationData);\n\nfunction useDeepMemo(memoFn, key) {\n  var ref = useRef();\n\n  if (!ref.current || !equal(key, ref.current.key)) {\n    ref.current = {\n      key: key,\n      value: memoFn()\n    };\n  }\n\n  return ref.current.value;\n}\n\nfunction useBaseQuery(query, options, lazy) {\n  if (lazy === void 0) {\n    lazy = false;\n  }\n\n  var context = useContext(getApolloContext());\n\n  var _a = useReducer(function (x) {\n    return x + 1;\n  }, 0),\n      tick = _a[0],\n      forceUpdate = _a[1];\n\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    query: query\n  }) : {\n    query: query\n  };\n  var queryDataRef = useRef();\n\n  if (!queryDataRef.current) {\n    queryDataRef.current = new QueryData({\n      options: updatedOptions,\n      context: context,\n      forceUpdate: forceUpdate\n    });\n  }\n\n  var queryData = queryDataRef.current;\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n  var memo = {\n    options: __assign(__assign({}, updatedOptions), {\n      onError: undefined,\n      onCompleted: undefined\n    }),\n    context: context,\n    tick: tick\n  };\n  var result = useDeepMemo(function () {\n    return lazy ? queryData.executeLazy() : queryData.execute();\n  }, memo);\n  var queryResult = lazy ? result[1] : result;\n  useEffect(function () {\n    return queryData.afterExecute({\n      lazy: lazy\n    });\n  }, [queryResult.loading, queryResult.networkStatus, queryResult.error, queryResult.data]);\n  useEffect(function () {\n    return function () {\n      return queryData.cleanup();\n    };\n  }, []);\n  return result;\n}\n\nfunction useQuery(query, options) {\n  return useBaseQuery(query, options, false);\n}\n\nfunction useLazyQuery(query, options) {\n  return useBaseQuery(query, options, true);\n}\n\nvar MutationData = function (_super) {\n  __extends(MutationData, _super);\n\n  function MutationData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        result = _a.result,\n        setResult = _a.setResult;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.runMutation = function (mutationFunctionOptions) {\n      if (mutationFunctionOptions === void 0) {\n        mutationFunctionOptions = {};\n      }\n\n      _this.onMutationStart();\n\n      var mutationId = _this.generateNewMutationId();\n\n      return _this.mutate(mutationFunctionOptions).then(function (response) {\n        _this.onMutationCompleted(response, mutationId);\n\n        return response;\n      })[\"catch\"](function (error) {\n        _this.onMutationError(error, mutationId);\n\n        if (!_this.getOptions().onError) throw error;\n      });\n    };\n\n    _this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n\n    _this.result = result;\n    _this.setResult = setResult;\n    _this.mostRecentMutationId = 0;\n    return _this;\n  }\n\n  MutationData.prototype.execute = function (result) {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    result.client = this.refreshClient().client;\n    return [this.runMutation, result];\n  };\n\n  MutationData.prototype.afterExecute = function () {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  };\n\n  MutationData.prototype.cleanup = function () {};\n\n  MutationData.prototype.mutate = function (mutationFunctionOptions) {\n    var _a = this.getOptions(),\n        mutation = _a.mutation,\n        variables = _a.variables,\n        optimisticResponse = _a.optimisticResponse,\n        update = _a.update,\n        _b = _a.context,\n        mutationContext = _b === void 0 ? {} : _b,\n        _c = _a.awaitRefetchQueries,\n        awaitRefetchQueries = _c === void 0 ? false : _c,\n        fetchPolicy = _a.fetchPolicy;\n\n    var mutateOptions = __assign({}, mutationFunctionOptions);\n\n    var mutateVariables = Object.assign({}, variables, mutateOptions.variables);\n    delete mutateOptions.variables;\n    return this.refreshClient().client.mutate(__assign({\n      mutation: mutation,\n      optimisticResponse: optimisticResponse,\n      refetchQueries: mutateOptions.refetchQueries || this.getOptions().refetchQueries,\n      awaitRefetchQueries: awaitRefetchQueries,\n      update: update,\n      context: mutationContext,\n      fetchPolicy: fetchPolicy,\n      variables: mutateVariables\n    }, mutateOptions));\n  };\n\n  MutationData.prototype.onMutationStart = function () {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  };\n\n  MutationData.prototype.onMutationCompleted = function (response, mutationId) {\n    var _a = this.getOptions(),\n        onCompleted = _a.onCompleted,\n        ignoreResults = _a.ignoreResults;\n\n    var data = response.data,\n        errors = response.errors;\n    var error = errors && errors.length > 0 ? new ApolloError({\n      graphQLErrors: errors\n    }) : undefined;\n\n    var callOncomplete = function callOncomplete() {\n      return onCompleted ? onCompleted(data) : null;\n    };\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data: data,\n        error: error\n      });\n    }\n\n    callOncomplete();\n  };\n\n  MutationData.prototype.onMutationError = function (error, mutationId) {\n    var onError = this.getOptions().onError;\n\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error: error,\n        data: undefined,\n        called: true\n      });\n    }\n\n    if (onError) {\n      onError(error);\n    }\n  };\n\n  MutationData.prototype.generateNewMutationId = function () {\n    return ++this.mostRecentMutationId;\n  };\n\n  MutationData.prototype.isMostRecentMutation = function (mutationId) {\n    return this.mostRecentMutationId === mutationId;\n  };\n\n  MutationData.prototype.updateResult = function (result) {\n    if (this.isMounted && (!this.previousResult || !equal(this.previousResult, result))) {\n      this.setResult(result);\n      this.previousResult = result;\n    }\n  };\n\n  return MutationData;\n}(OperationData);\n\nfunction useMutation(mutation, options) {\n  var context = useContext(getApolloContext());\n\n  var _a = useState({\n    called: false,\n    loading: false\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    mutation: mutation\n  }) : {\n    mutation: mutation\n  };\n  var mutationDataRef = useRef();\n\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData({\n        options: updatedOptions,\n        context: context,\n        result: result,\n        setResult: setResult\n      });\n    }\n\n    return mutationDataRef.current;\n  }\n\n  var mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n  useEffect(function () {\n    return mutationData.afterExecute();\n  });\n  return mutationData.execute(result);\n}\n\nvar SubscriptionData = function (_super) {\n  __extends(SubscriptionData, _super);\n\n  function SubscriptionData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        setResult = _a.setResult;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.currentObservable = {};\n    _this.setResult = setResult;\n\n    _this.initialize(options);\n\n    return _this;\n  }\n\n  SubscriptionData.prototype.execute = function (result) {\n    if (this.getOptions().skip === true) {\n      this.cleanup();\n      return {\n        loading: false,\n        error: undefined,\n        data: undefined,\n        variables: this.getOptions().variables\n      };\n    }\n\n    var currentResult = result;\n\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n\n    var shouldResubscribe = this.getOptions().shouldResubscribe;\n\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n\n    if (shouldResubscribe !== false && this.previousOptions && Object.keys(this.previousOptions).length > 0 && (this.previousOptions.subscription !== this.getOptions().subscription || !equal(this.previousOptions.variables, this.getOptions().variables) || this.previousOptions.skip !== this.getOptions().skip)) {\n      this.cleanup();\n      currentResult = this.getLoadingResult();\n    }\n\n    this.initialize(this.getOptions());\n    this.startSubscription();\n    this.previousOptions = this.getOptions();\n    return __assign(__assign({}, currentResult), {\n      variables: this.getOptions().variables\n    });\n  };\n\n  SubscriptionData.prototype.afterExecute = function () {\n    this.isMounted = true;\n  };\n\n  SubscriptionData.prototype.cleanup = function () {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  };\n\n  SubscriptionData.prototype.initialize = function (options) {\n    if (this.currentObservable.query || this.getOptions().skip === true) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy\n    });\n  };\n\n  SubscriptionData.prototype.startSubscription = function () {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query.subscribe({\n      next: this.updateCurrentData.bind(this),\n      error: this.updateError.bind(this),\n      complete: this.completeSubscription.bind(this)\n    });\n  };\n\n  SubscriptionData.prototype.getLoadingResult = function () {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    };\n  };\n\n  SubscriptionData.prototype.updateResult = function (result) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  };\n\n  SubscriptionData.prototype.updateCurrentData = function (result) {\n    var onSubscriptionData = this.getOptions().onSubscriptionData;\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  };\n\n  SubscriptionData.prototype.updateError = function (error) {\n    this.updateResult({\n      error: error,\n      loading: false\n    });\n  };\n\n  SubscriptionData.prototype.completeSubscription = function () {\n    var onSubscriptionComplete = this.getOptions().onSubscriptionComplete;\n    if (onSubscriptionComplete) onSubscriptionComplete();\n    this.endSubscription();\n  };\n\n  SubscriptionData.prototype.endSubscription = function () {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  };\n\n  return SubscriptionData;\n}(OperationData);\n\nfunction useSubscription(subscription, options) {\n  var context = useContext(getApolloContext());\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    subscription: subscription\n  }) : {\n    subscription: subscription\n  };\n\n  var _a = useState({\n    loading: !updatedOptions.skip,\n    error: undefined,\n    data: undefined\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var subscriptionDataRef = useRef();\n\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData({\n        options: updatedOptions,\n        context: context,\n        setResult: setResult\n      });\n    }\n\n    return subscriptionDataRef.current;\n  }\n\n  var subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions, true);\n  subscriptionData.context = context;\n  useEffect(function () {\n    return subscriptionData.afterExecute();\n  });\n  useEffect(function () {\n    return subscriptionData.cleanup.bind(subscriptionData);\n  }, []);\n  return subscriptionData.execute(result);\n}\n\nfunction useApolloClient() {\n  var client = React.useContext(getApolloContext()).client;\n  process.env.NODE_ENV === \"production\" ? invariant(client, 1) : invariant(client, 'No Apollo Client instance can be found. Please ensure that you ' + 'have called `ApolloProvider` higher up in your tree.');\n  return client;\n}\n\nfunction makeDefaultQueryInfo() {\n  return {\n    seen: false,\n    observable: null\n  };\n}\n\nvar RenderPromises = function () {\n  function RenderPromises() {\n    this.queryPromises = new Map();\n    this.queryInfoTrie = new Map();\n  }\n\n  RenderPromises.prototype.registerSSRObservable = function (observable, props) {\n    this.lookupQueryInfo(props).observable = observable;\n  };\n\n  RenderPromises.prototype.getSSRObservable = function (props) {\n    return this.lookupQueryInfo(props).observable;\n  };\n\n  RenderPromises.prototype.addQueryPromise = function (queryInstance, finish) {\n    var info = this.lookupQueryInfo(queryInstance.getOptions());\n\n    if (!info.seen) {\n      this.queryPromises.set(queryInstance.getOptions(), new Promise(function (resolve) {\n        resolve(queryInstance.fetchData());\n      }));\n      return null;\n    }\n\n    return finish();\n  };\n\n  RenderPromises.prototype.hasPromises = function () {\n    return this.queryPromises.size > 0;\n  };\n\n  RenderPromises.prototype.consumeAndAwaitPromises = function () {\n    var _this = this;\n\n    var promises = [];\n    this.queryPromises.forEach(function (promise, queryInstance) {\n      _this.lookupQueryInfo(queryInstance).seen = true;\n      promises.push(promise);\n    });\n    this.queryPromises.clear();\n    return Promise.all(promises);\n  };\n\n  RenderPromises.prototype.lookupQueryInfo = function (props) {\n    var queryInfoTrie = this.queryInfoTrie;\n    var query = props.query,\n        variables = props.variables;\n    var varMap = queryInfoTrie.get(query) || new Map();\n    if (!queryInfoTrie.has(query)) queryInfoTrie.set(query, varMap);\n    var variablesString = JSON.stringify(variables);\n    var info = varMap.get(variablesString) || makeDefaultQueryInfo();\n    if (!varMap.has(variablesString)) varMap.set(variablesString, info);\n    return info;\n  };\n\n  return RenderPromises;\n}();\n\nexport { RenderPromises, useApolloClient, useLazyQuery, useMutation, useQuery, useSubscription };"],"sourceRoot":""}